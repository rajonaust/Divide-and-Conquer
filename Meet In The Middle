// Meet In The Middle
// Given N numbers of coin and value T . Need to calculate , how many non-empty subsets of N coins makes T .
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define mx 45
long long arr[mx] ;
vector <long long> V[2];
void backtrack(int pos,int limit,long long value,int flag)
{
    if(pos>limit)
    {
        V[flag].push_back(value);
        return ;
    }
    backtrack(pos+1,limit,value+arr[pos],flag);
    backtrack(pos+1,limit,value,flag);
}
int main()
{
    long long N , T ; // N is the number of coins and T is the value .
    cin >> N >> T ;
    for(int i=0;i<N;i++) cin >> arr[i] ;
    V[0].clear() ; V[1].clear() ;

    backtrack(0,N/2,0,0);
    backtrack(N/2+1,N-1,0,1);
    sort(V[0].begin(),V[0].end());

    int len = V[1].size() ;
    long long ans = 0 ;

    for(int i=0;i<len;i++)
    {
        long long val = V[1][i] ;
        long long temp = upper_bound(V[0].begin(),V[0].end(),T-val) - lower_bound(V[0].begin(),V[0].end(),T-val) ;
        ans+=temp ;
    }

    if(T==0) ans--;
    cout << ans << endl ;
    return 0;
}
